import datetime
import random
import secrets

import requests
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from db.models import Box, User, UserRoom, Gift
from tg.handlers.survey import QUESTIONS
from tg.loader import bot
from tg.states import CreateBoxState, FillGiftsState, SurveyState, SendAnonymousMessageFromSanta, \
    SendAnonymousMessageFromReceiver

messages_router = Router(name="–†–æ—É—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–æ–∫")


@messages_router.callback_query(F.data.startswith("send_santa_message:"))
async def send_santa_message(call: types.CallbackQuery, state: FSMContext, db: AsyncSession):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    box = await db.execute(select(UserRoom).filter_by(box_id=int(call.data.split(':')[1]), user_id=call.from_user.id))
    box = box.scalars().first()

    await state.update_data(send_to=box.receiver.id, box_id=box.box_id)
    await call.message.edit_text(f"üì§–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–æ–¥–æ–ø–µ—á–Ω–æ–º—É, –∞ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ. "
                                 f"–°—Ç–∞—Ä–∞–π—Å—è –Ω–µ –≤—ã–¥–∞—Ç—å —Å–µ–±—è –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏, —á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ—Ä—Ç–∏—Ç—å —Å—é—Ä–ø—Ä–∏–∑!\n"
                                 f"–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –ø–∏—Å–∞—Ç—å, –Ω–∞–ø–∏—à–∏ /stop.")
    await state.set_state(SendAnonymousMessageFromSanta.waiting_for_message)


@messages_router.message(SendAnonymousMessageFromSanta.waiting_for_message)
async def send_message_to_receiver(message: types.Message, state: FSMContext, db: AsyncSession):
    if not message.text:
        return await message.answer(f"‚ùå–í —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.")
    state_data = await state.get_data()
    box = await db.execute(select(Box).filter_by(id=int(state_data["box_id"])))
    box = box.scalars().first()


    kb = [[
        types.InlineKeyboardButton(text="‚úâÔ∏è–û—Ç–≤–µ—Ç–∏—Ç—å –°–∞–Ω—Ç–µ", callback_data=f"send_to_santa:{box.id}")
    ]]
    try:
        await bot.send_message(chat_id=state_data["send_to"],
                               text=f"üéÖ–•–æ-—Ö–æ-—Ö–æ. –¢–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã –∏–∑ –∫–æ—Ä–æ–±–∫–∏ {box.name}:\n\n"
                                    f"<i>{message.text}</i>",
                               reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb))
        await message.answer(f"‚úÖ–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!")
    except Exception as _ex:
        await message.answer(f"‚ùå–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–µ—É–∂–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞?")


@messages_router.callback_query(F.data.startswith("send_to_santa:"))
async def send_santa_message(call: types.CallbackQuery, state: FSMContext, db: AsyncSession):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    box = await db.execute(select(UserRoom).filter_by(box_id=int(call.data.split(':')[1]), user_gift_to_id=call.from_user.id))
    box = box.scalars().first()

    await state.update_data(send_to=box.user_id, box_id=box.box_id)
    await call.message.edit_text(f"üì§–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –°–∞–Ω—Ç–µ, –∞ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ.")
    await state.set_state(SendAnonymousMessageFromReceiver.waiting_for_message)


@messages_router.message(SendAnonymousMessageFromReceiver.waiting_for_message)
async def send_message_to_receiver(message: types.Message, state: FSMContext, db: AsyncSession):
    if not message.text:
        return await message.answer(f"‚ùå–í —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.")
    state_data = await state.get_data()
    box = await db.execute(select(Box).filter_by(id=int(state_data["box_id"])))
    box = box.scalars().first()
    user_room = await db.execute(select(UserRoom).filter_by(box_id=box.id, user_id=int(state_data["send_to"])))
    user_room = user_room.scalars().first()

    kb = [[
        types.InlineKeyboardButton(text="‚úâÔ∏è–û—Ç–≤–µ—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ", callback_data=f"send_santa_message:{box.id}")
    ], [
        types.InlineKeyboardButton(text="üßë‚ÄçüéÑ–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data=f"receiver_card:{box.id}")
    ]]
    try:
        await bot.send_message(chat_id=state_data["send_to"],
                               text=f"üéÖ–•–æ-—Ö–æ-—Ö–æ. –¢–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–≤–æ–µ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ {user_room.receiver.full_name} "
                                    f"–∏–∑ –∫–æ—Ä–æ–±–∫–∏ {box.name}:\n\n"
                                    f"<i>{message.text}</i>",
                               reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb))
        await message.answer(f"‚úÖ–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!")
    except Exception as _ex:
        await message.answer(f"‚ùå–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–µ—É–∂–µ–ª–∏ –°–∞–Ω—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞?")
