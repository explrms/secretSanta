import datetime
import random
import secrets

import requests
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from db.models import Box, User, UserRoom, Gift
from tg.handlers.survey import QUESTIONS
from tg.loader import bot
from tg.states import CreateBoxState, FillGiftsState, SurveyState

box_router = Router(name="–†–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–æ–±–∫–∞–º–∏")


@box_router.callback_query(F.data == "create_box")
@box_router.message(Command("create_box"))
async def start_create_box(call: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–æ–±–∫–∏.
    """
    await state.set_state(CreateBoxState.waiting_for_name)
    await call.message.edit_text("üéâ –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∫–æ—Ä–æ–±–∫—É!\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏:")


@box_router.message(CreateBoxState.waiting_for_name)
async def set_box_name(message: types.Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ä–æ–±–∫–∏.
    """
    box_name = message.text
    await state.update_data(name=box_name)
    await state.set_state(CreateBoxState.waiting_for_final_reg_date)
    await message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")


@box_router.message(CreateBoxState.waiting_for_final_reg_date)
async def set_final_reg_date(message: types.Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    try:
        final_reg_date = message.text
        await state.update_data(final_reg_date=final_reg_date)
        await state.set_state(CreateBoxState.waiting_for_max_gift_price)
        await message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ–¥–∞—Ä–∫–∞ (–≤ —Ä—É–±–ª—è—Ö):")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")


@box_router.message(CreateBoxState.waiting_for_max_gift_price)
async def set_max_gift_price(message: types.Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –ø–æ–¥–∞—Ä–∫–∞.
    """
    try:
        max_price = float(message.text)
        await state.update_data(max_gift_price=max_price)
        await state.set_state(CreateBoxState.waiting_for_gift_date)
        await message.answer("üéÅ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—Ä—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –ø–æ–¥–∞—Ä–∫–∞.")


@box_router.message(CreateBoxState.waiting_for_gift_date)
async def set_gift_date(message: types.Message, state: FSMContext, db: AsyncSession, user: User):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –≤—Ä—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏.
    """
    try:
        gift_date = message.text
        data = await state.get_data()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–æ–±–∫—É
        join_code = secrets.token_urlsafe(8)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–æ–±–∫–∏ –≤ –ë–î
        new_box = Box(
            name=data["name"],
            join_code=join_code,
            final_reg_date=datetime.datetime.strptime(data["final_reg_date"], "%d.%m.%Y"),
            max_gift_price=data["max_gift_price"],
            gift_date=datetime.datetime.strptime(gift_date, "%d.%m.%Y"),
            admin_id=user.id,
        )
        db.add(new_box)
        await db.commit()

        await state.clear()

        await message.answer(
            f"üéâ –ö–æ—Ä–æ–±–∫–∞ '{data['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"üîë C—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: <code>https://t.me/secret_s_a_n_t_a_bot?start={join_code}</code>\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ: {data['final_reg_date']}\n"
            f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–∞—Ä–∫–∞: {data['max_gift_price']} —Ä—É–±.\n"
            f"üéÅ –î–∞—Ç–∞ –≤—Ä—É—á–µ–Ω–∏—è: {gift_date}\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")


@box_router.callback_query(F.data == "my_boxes")
async def my_boxes_root(call: types.CallbackQuery, db: AsyncSession, user: User):
    text = f"üëá–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–∞—à–∏—Ö –∫–æ—Ä–æ–±–æ–∫:"
    kb = []
    for box in user.rooms:
        kb.append([
            types.InlineKeyboardButton(text=f"{box.name}", callback_data=f"select_box:{box.id}")
        ])
    kb.append([
        types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
    ])

    await call.message.edit_text(text=text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb))


@box_router.callback_query(F.data.startswith("select_box:"))
async def select_box_root(call: types.CallbackQuery, db: AsyncSession, user: User):
    box = await db.execute(select(Box).filter_by(id=int(call.data.split(':')[1])))
    box = box.scalars().first()
    box_text = (f"‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ä–æ–±–∫–µ {box.name}:\n\n"
                f"‚åõÔ∏è<b>–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {datetime.datetime.strftime(box.final_reg_date, "%d.%m.%Y")}\n"
                f"ü§ë<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–∞—Ä–∫–∞:</b> {box.max_gift_price}‚ÇΩ\n"
                f"üéÅ<b>–í—Ä—É—á–µ–Ω–∏–µ:</b> {datetime.datetime.strftime(box.gift_date, "%d.%m.%Y")}")

    user_room = await db.execute(select(UserRoom).filter_by(user_id=user.id, box_id=box.id))
    user_room = user_room.scalars().first()
    kb = []
    if not user_room.receiver:
        box_text += "\n\nüï∞Ô∏è–í–∞–º –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–¥–æ–ø–µ—á–Ω—ã–π –¥–ª—è –≤—Ä—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."
        shuffled = False
        if user_room.profile == {}:
            kb.append([
                types.InlineKeyboardButton(text="‚ú®–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è", callback_data=f"fill_wishes:{box.id}")
            ])
        else:
            kb.append([
                types.InlineKeyboardButton(text="‚ú®–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è", callback_data=f"fill_wishes:{box.id}")
            ])

        user_box_gifts = await db.execute(select(Gift).filter_by(box_id=box.id, user_id=user_room.user_id))
        user_box_gifts = user_box_gifts.scalars().all()
        if len(user_box_gifts) == 0:
            kb.append([
                types.InlineKeyboardButton(text="üéÅ–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data=f"fill_gifts:{box.id}")
            ])
        else:
            kb.append([
                types.InlineKeyboardButton(text="üéÅ–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data=f"fill_gifts:{box.id}")
            ])
    else:
        box_text += ("\n\n‚úÖ–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–¥–æ–ø–µ—á–Ω—ã–π –¥–ª—è –≤—Ä—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –µ–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –∏–ª–∏ "
                     "–ø–æ–æ–±—â–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
        kb.append([
            types.InlineKeyboardButton(text="üßë‚ÄçüéÑ–ú–æ–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π", callback_data=f"receiver_card:{box.id}")
        ])
        kb.append([
            types.InlineKeyboardButton(text="‚úâÔ∏è–ù–∞–ø–∏—Å–∞—Ç—å –º–æ–µ–º—É –°–∞–Ω—Ç–µ", callback_data=f"send_to_santa:{box.id}")
        ])
        shuffled = True

    if box.admin_id == call.from_user.id:
        box_text += ("\n\nüëë–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                     "üë•–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n")
        user_rooms = await db.execute(select(UserRoom).filter_by(box_id=box.id))
        user_rooms = user_rooms.scalars().all()
        for user in user_rooms:
            if user.profile == {}:
                emoji_status = "‚ùå"
            else:
                emoji_status = "‚úÖ"
            box_text += f"\n‚Üí {user.user.full_name} (@{user.user.username}) {emoji_status}"
        box_text += "\n‚úÖ–ó–∞–ø–æ–ª–Ω–∏–ª –ø–æ–∂–µ–ª–∞–Ω–∏—è, ‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–∏–ª –ø–æ–∂–µ–ª–∞–Ω–∏—è"

        if not shuffled:
            kb.append([
                types.InlineKeyboardButton(text="üé≤–ü—Ä–æ–≤–µ—Å—Ç–∏ –∂–µ—Ä–µ–±—å—ë–≤–∫—É", callback_data=f"shuffle_box:{box.id}")
            ])

    kb.append([
        types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–æ–±–æ–∫", callback_data='my_boxes')
    ])
    await call.message.edit_text(box_text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb))


@box_router.callback_query(F.data.startswith("fill_wishes:"))
async def fill_wishes(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(f"üéôÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –í–∞—à —Å–∞–Ω—Ç–∞ –º–æ–≥ –ø–æ–¥–∞—Ä–∏—Ç—å –≤–∞–º –ª—É—á—à–∏–π "
                              f"–ø–æ–¥–∞—Ä–æ–∫. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∫–æ—Ä–æ–±–∫–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞ –∫–æ—Ä–æ–±–∫–∞ "
                              f"–æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
    await state.set_state(SurveyState.waiting_for_answer)
    await state.update_data(question_index=0, answers={}, box_id=int(call.data.split(":")[1]))
    question = QUESTIONS[0]["question"]
    return await call.message.answer(f"{question}")


@box_router.callback_query(F.data.startswith("shuffle_box:"))
async def shuffle_box_handler(call: types.CallbackQuery, db: AsyncSession, user: User):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞—Ñ–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã.
    """
    box_id = int(call.data.split(':')[1])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π UserRoom –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
    user_rooms_query = await db.execute(
        select(UserRoom).filter_by(box_id=box_id)
    )
    user_rooms = user_rooms_query.scalars().all()

    if len(user_rooms) < 2:
        await call.message.edit_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏. –ú–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"select_box:{box_id}")]]
            ),
        )
        return
    for user in user_rooms:
        if user.profile == {}:
            await call.message.edit_text(
                "‚ùå –ù–µ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"select_box:{box_id}")]]
                ),
            )
            return

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    user_ids = [user_room.user_id for user_room in user_rooms]

    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –¥–∞—Ä–∏—Ç –ø–æ–¥–∞—Ä–æ–∫ —Å–∞–º —Å–µ–±–µ
    is_valid_shuffle = False
    while not is_valid_shuffle:
        random.shuffle(user_ids)
        is_valid_shuffle = all(
            user_room.user_id != user_ids[(i + 1) % len(user_ids)]  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–Ω–µ —Å–∞–º —Å–µ–±–µ"
            for i, user_room in enumerate(user_rooms)
        )

    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö (receiver) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    for i, user_room in enumerate(user_rooms):
        user_room.user_gift_to_id = user_ids[(i + 1) % len(user_ids)]  # –°–ª–µ–¥—É—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —Å–ø–∏—Å–∫–µ

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.commit()

    kb = []
    kb.append([
        types.InlineKeyboardButton(text="üßë‚ÄçüéÑ–ú–æ–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π", callback_data=f"receiver_card:{box_id}")
    ])

    for user in user_ids:
        await bot.send_message(chat_id=user,
                               text=f"üßë‚ÄçüéÑ–¢–µ–±–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–¥–æ–ø–µ—á–Ω—ã–π –Ω–∞ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É. –°–∫–æ—Ä–µ–µ –æ—Ç–∫—Ä—ã–≤–∞–π –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å "
                                    f"–∏ –≥–æ—Ç–æ–≤—å—Å—è –¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫!",
                               reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb))

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∂–µ—Ä–µ–±—å–µ–≤–∫–µ
    await call.message.edit_text(
        "üé≤ –ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ –¥–ª—è –≤—Ä—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤.",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ—Ä–æ–±–∫–µ", callback_data=f"select_box:{box_id}")]]
        ),
    )


@box_router.callback_query(F.data.startswith("fill_gifts:"))
async def start_fill_gifts(call: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤.
    """
    await call.message.edit_text("üí°–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –ø–æ–¥–∞—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –ø–æ–ª—É—á–∏—Ç—å. –¢—ã —Å–º–æ–∂–µ—à—å –≤–Ω–µ—Å—Ç–∏ —Å—Ä–∞–∑—É "
                                 "–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, —Ö–æ—Ç–µ–ª –±—ã —Ç—ã "
                                 "–ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Ö–æ–∂–µ–µ.\n"
                                 "–ï—Å–ª–∏ —É —Ç–≤–æ–µ–≥–æ –°–∞–Ω—Ç—ã –±—É–¥–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –æ—Ç–º–µ—Ç–∫–æ–π \"–ò–º–µ–Ω–Ω–æ —ç—Ç–æ\" - –æ–Ω –¥–æ–ª–∂–µ–Ω "
                                 "–±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –¢–∞–∫ –ø–æ–¥–∞—Ä–æ–∫ —Å—Ç–∞–Ω–µ—Ç —Å—é—Ä–ø—Ä–∏–∑–æ–º.\n\n"
                                 "–£—á—Ç–∏, —á—Ç–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∂–µ–ª–∞–µ–º—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ—Ä–æ–±–∫–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–µ–±–µ —Ç–æ–ª—å–∫–æ "
                                 "–ø–æ–∫–∞ –∫–æ—Ä–æ–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ–¥–∞—Ä–∫–∏, "
                                 "–Ω–∞–ø–∏—à–∏ /stop")
    box_id = int(call.data.split(":")[1])
    await state.update_data(box_id=box_id)
    await state.set_state(FillGiftsState.waiting_for_gift_url)
    await call.message.answer("üéÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ —Å –ª—é–±–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞.")


@box_router.message(FillGiftsState.waiting_for_gift_url)
async def set_gift_url(message: types.Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.
    """
    gift_url = message.text
    response = requests.get(f'https://clck.ru/--',
                            params={
                                'url': f'{gift_url}'})
    if response.status_code == 200:
        link = response.text
    else:
        return await message.answer(f"–ö–∞–∂–µ—Ç—Å—è –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")

    await state.update_data(gift_url=link)
    await state.set_state(FillGiftsState.waiting_for_gift_confirmation)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üéØ –ò–º–µ–Ω–Ω–æ —ç—Ç–æ", callback_data="gift_is_exact:1"),
            types.InlineKeyboardButton(text="üé≤ –ß—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ", callback_data="gift_is_exact:0")
        ]
    ])
    await message.answer("üéÅ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ?", reply_markup=kb)


@box_router.callback_query(F.data.startswith("gift_is_exact:"))
async def set_gift_confirmation(call: types.CallbackQuery, state: FSMContext, db: AsyncSession, user: User):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫.
    """
    is_exact = bool(int(call.data.split(":")[1]))
    data = await state.get_data()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    new_gift = Gift(
        box_id=data["box_id"],
        user_id=user.id,
        gift_url=data["gift_url"],
        is_exact=is_exact,
    )
    db.add(new_gift)
    await db.commit()

    # –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üéÅ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ–¥–∞—Ä–æ–∫", callback_data="add_another_gift"),
            types.InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", callback_data="exit_gift_filling")
        ]
    ])
    await call.message.edit_text(
        "üéâ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
        reply_markup=kb
    )


@box_router.callback_query(F.data == "add_another_gift")
async def add_another_gift(call: types.CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫.
    """
    await state.set_state(FillGiftsState.waiting_for_gift_url)
    await call.message.edit_text("üéÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫.")


@box_router.callback_query(F.data == "exit_gift_filling")
async def exit_gift_filling(call: types.CallbackQuery, state: FSMContext):
    """
    –í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤.
    """
    await state.clear()
    await call.message.edit_text(
        "üö™ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ—Ä–æ–±–∫–µ –∏–∑ –º–µ–Ω—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /start."
    )
