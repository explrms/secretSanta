from aiogram import Router, types, F
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from db.models import User, Box, UserRoom
from tg.handlers.survey import QUESTIONS
from tg.states import SurveyState
from tg.loader import bot

register_router = Router(name="–†–æ—É—Ç–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")


@register_router.callback_query(F.data == "main_menu")
@register_router.message(Command("start"))
async def start_command(event: types.Message | types.CallbackQuery,
                        user: User,
                        db: AsyncSession,
                        state: FSMContext,
                        command: CommandObject = None,
                        ):
    """
    –í—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.
    :param state:
    :param db: –û–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
    :param event: –°–æ–æ–±—â–µ–Ω–∏–µ
    :param command: –û–±—ä–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã. –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    :param user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    :return:
    """
    if isinstance(event, types.Message):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if not user:
            user = User(
                id=event.from_user.id,
                username=event.from_user.username,
                full_name=event.from_user.full_name,
            )
            db.add(user)
            await db.commit()
            user = await db.execute(select(User).filter_by(id=event.from_user.id))
            user = user.scalars().first()
        elif user.username != event.from_user.username:
            user.username = event.from_user.username
            db.add(user)
            await db.commit()
            user = await db.execute(select(User).filter_by(id=event.from_user.id))
            user = user.scalars().first()

        user_id = event.from_user.id
    elif isinstance(event, types.CallbackQuery):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É
        user_id = event.from_user.id
    else:
        raise Exception("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")

    kb = []

    hello_text = "üéÑ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ 2025!\n\n"
    if len(user.rooms) == 0:
        hello_text += ("ü´ô–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ—Ä–æ–±–∫–µ. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ "
                       "–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        hello_text += f"üåü–í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ—Ä–æ–±–∫–∞—Ö:\n"
        for room in user.rooms:
            hello_text += f"‚≠êÔ∏é {room.name}\n"
        kb.append([
            types.InlineKeyboardButton(text="üéÅ–ú–æ–∏ –∫–æ—Ä–æ–±–∫–∏", callback_data="my_boxes")
        ])

    kb.append([
        types.InlineKeyboardButton(text="üéâ–°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–±–∫—É", callback_data="create_box")
    ])
    if command and command.args:
        # –ï—Å–ª–∏ –ø–æ–π–º–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ—Ä–æ–±–∫–∏
        box = await db.execute(select(Box).filter_by(join_code=str(command.args)))
        box = box.scalars().first()
        if box:
            user_room = await db.execute(select(UserRoom).filter_by(box_id=box.id))
            user_room = user_room.scalars().first()
            if user_room and user_room.receiver:
                return await event.answer(f"‚ùå–≠—Ç–∞ –∫–æ—Ä–æ–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –¢—ã –Ω–µ –º–æ–∂–µ—à—å "
                                          f"–∫ –Ω–µ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ—Ä–æ–±–∫–µ
            user_room = await db.execute(select(UserRoom).filter_by(user_id=user.id, box_id=box.id))
            if user_room.scalars().first():
                return await event.answer(f"ü´∑–ü—Ä–∏—Ç–æ—Ä–º–æ–∑–∏, —Ç—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —ç—Ç–æ–π –∫–æ—Ä–æ–±–∫–µ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫. "
                                          f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å "
                                          f"–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π, –Ω–∞–ø–∏—à–∏ /start.")

            # Create a UserRoom instance
            user_room = UserRoom(user_id=user.id, box_id=box.id, profile={})
            # Add the UserRoom instance to the session
            db.add(user_room)
            # Commit the transaction
            await db.commit()
            await event.answer(
                f"üéÅ–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ—Ä–æ–±–∫—É <strong>{box.name}</strong>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ "
                f"–≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –í–∞—à —Å–∞–Ω—Ç–∞ –º–æ–≥ –ø–æ–¥–∞—Ä–∏—Ç—å –≤–∞–º –ª—É—á—à–∏–π –ø–æ–¥–∞—Ä–æ–∫!")
            await state.set_state(SurveyState.waiting_for_answer)
            await state.update_data(question_index=0, answers={}, box_id=box.id)
            question = QUESTIONS[0]["question"]
            return await event.answer(f"{question}")

    if isinstance(event, types.Message):
        await event.answer(text=hello_text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb))
    elif isinstance(event, types.CallbackQuery):
        await event.message.edit_text(text=hello_text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb))
        await event.answer()
