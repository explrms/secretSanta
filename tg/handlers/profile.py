import copy
import datetime
import random

from aiogram import Router, types, F
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from db.models import Box, UserRoom, User

profile_router = Router(name="–†–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π")


@profile_router.callback_query(F.data.startswith("receiver_card:"))
async def show_receiver_profile(call: types.CallbackQuery, db: AsyncSession):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ—Ä–æ–±–∫–µ.
    """
    box_id = int(call.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–º
    user_room_query = await db.execute(
        select(UserRoom).filter_by(user_id=call.from_user.id, box_id=box_id)
    )
    user_room = user_room_query.scalars().first()

    if not user_room or not user_room.receiver:
        await call.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"select_box:{box_id}")]]
            ),
        )
        return

    receiver = user_room.receiver
    receiver_profile = user_room.profile

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–º
    text = (f"üßë‚ÄçüéÑ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {receiver.full_name}\n"
            f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {receiver.date_reg.strftime('%d.%m.%Y')}\n"
            f"üìß <b>Username:</b> @{receiver.username if receiver.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"‚ùóÔ∏è–ù–µ –ø–∏—à–∏ —á–µ–ª–æ–≤–µ–∫—É –ª–∏—á–Ω–æ, —ç—Ç–æ –≤—ã–¥–∞—Å—Ç —Ç–µ–±—è –∏ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è! –õ—É—á—à–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º "
            f"—á–∞—Ç–æ–º –≤ –±–æ—Ç–µ.")

    kb = []

    # –ö–Ω–æ–ø–∫–∞ "–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ" —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∫–µ—Ç—ã
    if receiver_profile:
        kb.append([types.InlineKeyboardButton(text="üìÑ –û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data=f"user_profile:{box_id}")])

    # –ö–Ω–æ–ø–∫–∞ "–ñ–µ–ª–∞–µ–º—ã–µ –ø–æ–¥–∞—Ä–∫–∏", –µ—Å–ª–∏ —Ç–∞–∫–∏–µ —É–∫–∞–∑–∞–Ω—ã
    if len(receiver.gifts) > 0:
        kb.append([types.InlineKeyboardButton(text="üéÅ –ñ–µ–ª–∞–µ–º—ã–µ –ø–æ–¥–∞—Ä–∫–∏", callback_data=f"user_gift_wishes:{box_id}")])

    kb.append([types.InlineKeyboardButton(text="üé≠–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"send_santa_message:{box_id}")])

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    kb.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"select_box:{box_id}")])

    await call.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb))


@profile_router.callback_query(F.data.startswith("user_profile:"))
async def show_user_profile(call: types.CallbackQuery, db: AsyncSession):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∫–µ—Ç—ã –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ.
    """
    box_id = int(call.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ
    user_room_query = await db.execute(
        select(UserRoom).filter_by(user_id=call.from_user.id, box_id=box_id)
    )
    user_room = user_room_query.scalars().first()

    user_room_query = await db.execute(
        select(UserRoom).filter_by(user_id=user_room.receiver.id, box_id=box_id)
    )
    user_room = user_room_query.scalars().first()

    if not user_room or not user_room.profile:
        await call.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"receiver_card:{box_id}")]]
            ),
        )
        return

    profile = user_room.profile
    text = "üìÑ <b>–ê–Ω–∫–µ—Ç–∞ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ</b>\n\n"
    questions = {
        "free_time": "üöµ‚Äç‚ôÇÔ∏è –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è:",
        "relaxation": "‚õ±Ô∏è –°–ø–æ—Å–æ–± —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è:",
        "favorite_color": "üåà –õ—é–±–∏–º—ã–π —Ü–≤–µ—Ç:",
        "gift_type": "üí° –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∏–ª–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:",
        "gift_preference": "ü§î –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–æ–¥–∞—Ä–∫–∞–º:",
        "allergies": "ü§¢ –ê–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:",
        "favorites": "ü¶â –õ—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã/–ø–µ—Ä—Å–æ–Ω–∞–∂–∏/–º—É–∑—ã–∫–∞–Ω—Ç—ã:",
        "pleasures": "‚õ∑Ô∏è –ß—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ:",
        "gift_wishes": "‚úèÔ∏è –ü–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫—É:",
    }

    for key, question in questions.items():
        if key in profile:
            text += f"<b>{question}</b> {profile[key]}\n"

    await call.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"receiver_card:{box_id}")]]
        ),
    )


@profile_router.callback_query(F.data.startswith("user_gift_wishes:"))
async def show_user_gift_wishes(call: types.CallbackQuery, db: AsyncSession):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –∫ –ø–æ–¥–∞—Ä–∫–∞–º.
    """
    box_id = int(call.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ
    user_room_query = await db.execute(
        select(UserRoom).filter_by(user_id=call.from_user.id, box_id=box_id)
    )
    user_room = user_room_query.scalars().first()

    if len(user_room.receiver.gifts) == 0:
        await call.message.edit_text(
            "‚ùå –ü–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"receiver_card:{box_id}")]]
            ),
        )
        return

    text = f"üéÅ <b>–ñ–µ–ª–∞–µ–º—ã–µ –ø–æ–¥–∞—Ä–∫–∏</b>\n\n"
    gifts_object = []
    for gift in user_room.receiver.gifts:
        gifts_object.append({"url": gift.gift_url, "is_exact": gift.is_exact})
    random.shuffle(gifts_object)

    for gift in gifts_object:
        if gift["is_exact"]:
            gift_icon = "üéØ"
        else:
            gift_icon = "üé≤"
        text += f"üéÅ {gift["url"]} ‚Äî {gift_icon}\n"

    text += "\nüéØ - —Ö–æ—á–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ; üé≤ - —Ö–æ—á–µ—Ç—Å—è —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Ö–æ–∂–µ–µ"

    await call.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"receiver_card:{box_id}")]]
        ),
        disable_web_page_preview=True
    )